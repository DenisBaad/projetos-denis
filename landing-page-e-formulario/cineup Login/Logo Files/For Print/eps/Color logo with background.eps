%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2350 600
%%HiResBoundingBox: 0 0 2349.1199 600
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2349.1199 600 re
W
q
[0.24 0 0 -0.24 0 600] cm
q
0 0 9784.375 2500 re
W*
q
[3.12471 0 0 3.125478 0 0.00352175] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3131.291 800.87524 re
f
Q
q
[20.512316 0 0 20.517359 205.12317 205.17712] cm
/DeviceRGB {} CS
[0.2235 0 0.3137] SC
/DeviceRGB {} cs
[0.2235 0 0.3137] sc
10 0 m
447 0 l
447.32755 0 447.65427 0.016051 447.98022 0.048153 c
448.30615 0.080255 448.6297 0.128253 448.9509 0.192147 c
449.27213 0.256042 449.58945 0.335525 449.90283 0.430597 c
450.21625 0.525668 450.52423 0.635871 450.82681 0.761205 c
451.12939 0.886538 451.42511 1.026399 451.71396 1.180787 c
452.00281 1.335175 452.28339 1.503348 452.55569 1.685304 c
452.828 1.86726 453.09076 2.062124 453.34393 2.269896 c
453.59708 2.477667 453.83945 2.697346 454.07104 2.928932 c
454.30264 3.160518 454.52234 3.402896 454.7301 3.656067 c
454.9379 3.909237 455.13275 4.171981 455.31467 4.444297 c
455.49664 4.716614 455.66479 4.997192 455.81918 5.286032 c
455.97357 5.574872 456.1134 5.870583 456.23874 6.173165 c
456.36411 6.475747 456.47433 6.783743 456.5694 7.097153 c
456.66449 7.410563 456.74396 7.727877 456.80783 8.049096 c
456.87177 8.370316 456.91977 8.693893 456.95184 9.019829 c
456.98398 9.345764 457.00003 9.672488 457 10 c
457 92 l
457.00003 92.327522 456.98398 92.654243 456.95187 92.980179 c
456.91977 93.306114 456.87177 93.629684 456.80783 93.950897 c
456.74396 94.272118 456.66449 94.589439 456.5694 94.902847 c
456.47433 95.216255 456.36411 95.524246 456.23874 95.826828 c
456.1134 96.12941 455.97354 96.425117 455.81915 96.713959 c
455.66476 97.0028 455.49661 97.283371 455.31464 97.555687 c
455.13272 97.828011 454.9379 98.090759 454.7301 98.343933 c
454.52234 98.597099 454.30264 98.839478 454.07104 99.07106 c
453.83945 99.30265 453.59708 99.522331 453.3439 99.730095 c
453.09073 99.937866 452.82797 100.132729 452.55566 100.314682 c
452.28336 100.496643 452.00281 100.664818 451.71396 100.819206 c
451.42511 100.973595 451.12939 101.113457 450.82681 101.238785 c
450.52423 101.36412 450.21625 101.474319 449.90286 101.569389 c
449.58945 101.664467 449.27213 101.74395 448.9509 101.807846 c
448.6297 101.871742 448.30615 101.919746 447.98022 101.951851 c
447.65427 101.983948 447.32755 102 447 102 c
10 102 l
9.672488 102 9.345764 101.983955 9.019829 101.951859 c
8.693893 101.919746 8.370316 101.871742 8.049096 101.807846 c
7.727877 101.74395 7.410563 101.664467 7.097153 101.569389 c
6.783743 101.474319 6.475747 101.36412 6.173165 101.238785 c
5.870583 101.113457 5.574873 100.973595 5.286033 100.819206 c
4.997192 100.664818 4.716614 100.496643 4.444297 100.314682 c
4.171981 100.132729 3.909237 99.937866 3.656067 99.730095 c
3.402896 99.522331 3.160518 99.30265 2.928932 99.07106 c
2.697346 98.839478 2.477667 98.597099 2.269896 98.343933 c
2.062124 98.090759 1.86726 97.828011 1.685304 97.555687 c
1.503348 97.283371 1.335176 97.0028 1.180787 96.713966 c
1.026399 96.425125 0.886538 96.12941 0.761205 95.826828 c
0.635871 95.524246 0.525668 95.216255 0.430597 94.902847 c
0.335525 94.589439 0.256042 94.272118 0.192147 93.950897 c
0.128253 93.629684 0.080255 93.306107 0.048153 92.980171 c
0.016051 92.654243 0 92.327522 0 92 c
0 10 l
0 9.672488 0.016051 9.345764 0.048153 9.019829 c
0.080255 8.693893 0.128253 8.370316 0.192147 8.049096 c
0.256042 7.727877 0.335525 7.410563 0.430597 7.097153 c
0.525668 6.783743 0.635871 6.475747 0.761205 6.173165 c
0.886538 5.870583 1.026399 5.574873 1.180787 5.286033 c
1.335175 4.997192 1.503348 4.716614 1.685304 4.444297 c
1.86726 4.171981 2.062124 3.909237 2.269896 3.656067 c
2.477667 3.402896 2.697346 3.160518 2.928932 2.928932 c
3.160518 2.697346 3.402896 2.477667 3.656067 2.269896 c
3.909237 2.062124 4.171981 1.86726 4.444297 1.685304 c
4.716614 1.503348 4.997192 1.335176 5.286032 1.180787 c
5.574872 1.026399 5.870583 0.886538 6.173165 0.761205 c
6.475747 0.635871 6.783743 0.525668 7.097153 0.430597 c
7.410563 0.335525 7.727877 0.256042 8.049096 0.192147 c
8.370316 0.128253 8.693893 0.080255 9.019829 0.048153 c
9.345764 0.016051 9.672488 0 10 0 c
h
f
Q
q
[49.53334 0 0 49.545521 572.80048 620.68927] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
8.076201 20.195311 m
3.9258 20.195311 0.8594 17.373011 0.8594 12.939411 c
0.8594 8.505812 3.9258 5.693311 8.076201 5.693311 c
11.2207 5.693311 13.740301 7.304611 14.7461 9.980412 c
12.011701 10.976502 l
11.386701 9.335901 9.892601 8.388601 8.076201 8.388601 c
5.6446 8.388601 3.779301 10.087801 3.779301 12.939402 c
3.779301 15.791002 5.644501 17.499901 8.076201 17.499901 c
9.892601 17.499901 11.386701 16.542872 12.011701 14.902201 c
14.7461 15.898291 l
13.7402 18.574091 11.2207 20.19519 8.076201 20.19519 c
8.076201 20.195311 l
h
18.964872 20 m
18.964872 5.889 l
21.894573 5.889 l
21.894573 20 l
18.964874 20 l
18.964872 20 l
h
36.992344 5.889 m
39.912243 5.889 l
39.912243 20 l
36.523544 20 l
30.273544 9.912 l
30.273544 20 l
27.353645 20 l
27.353645 5.889 l
30.703245 5.889 l
36.992344 15.918 l
36.992344 5.889 l
h
53.564686 8.467 m
48.330284 8.467 l
48.330284 11.6701 l
52.968983 11.6701 l
52.968983 14.218901 l
48.330284 14.218901 l
48.330284 17.4123 l
53.564682 17.4123 l
53.564682 20.0002 l
45.381081 20.0002 l
45.381081 5.8892 l
53.564682 5.8892 l
53.564682 8.4673 l
53.564686 8.467 l
h
63.623066 20.195311 m
60.527367 20.195311 58.105465 18.61331 58.105465 15.058611 c
58.105465 5.888711 l
61.035164 5.888711 l
61.035164 14.658211 l
61.035164 16.80661 62.177765 17.60741 63.623062 17.60741 c
65.078163 17.60741 66.230461 16.79686 66.230461 14.658211 c
66.230461 5.888711 l
69.160164 5.888711 l
69.160164 15.058611 l
69.160164 18.613312 66.728561 20.195311 63.623062 20.195311 c
63.623066 20.195311 l
h
80.205063 5.889 m
82.968765 5.889 84.687462 7.9398 84.687462 10.4495 c
84.687462 13.017901 82.968658 14.9417 80.205063 14.9417 c
77.265564 14.9417 l
77.265564 20.000299 l
74.335861 20.000299 l
74.335861 5.889299 l
80.204964 5.889299 l
80.205063 5.889 l
h
79.716766 12.4902 m
81.181564 12.4902 81.865166 11.67965 81.865166 10.4101 c
81.865166 9.1894 81.181572 8.3398 79.716766 8.3398 c
77.265564 8.3398 l
77.265564 12.4902 l
79.716766 12.4902 l
h
f
Q
q
[30.470749 0 0 30.478243 4254.9814 -267.32983] cm
q
34 74.400002 m
33.32 74.400002 32.640999 74.227005 32.028999 73.880005 c
30.775 73.170998 30 71.842003 30 70.400002 c
30 29.6 l
30 28.159 30.775 26.829 32.028999 26.118999 c
33.281998 25.41 34.821999 25.43 36.056999 26.17 c
70.056999 46.57 l
71.263 47.292999 72 48.595001 72 50 c
72 51.404999 71.263 52.707001 70.057999 53.43 c
36.057999 73.830002 l
35.424999 74.209999 34.713001 74.400002 34 74.400002 c
h
38 36.665001 m
38 63.335999 l
60.226002 50 l
38 36.665001 l
h
W
[42 0 0 48.799205 29.999995 25.600796] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0.00391 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 1 mul 0 add
1 index 1 exp -0.867 mul 0.867 add
2 index 1 exp -0.169 mul 1 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
Q
q
[50.904041 0 0 50.916557 6401.2529 602.93506] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
17.157719 8.467 m
11.786619 8.467 l
11.786619 11.6701 l
16.42532 11.6701 l
16.42532 14.218901 l
11.786619 14.218901 l
11.786619 20.0002 l
8.83742 20.0002 l
8.83742 5.8892 l
17.157719 5.8892 l
17.157719 8.4673 l
17.157719 8.467 l
h
24.404337 17.4121 m
28.828136 17.4121 l
28.828136 20 l
21.474636 20 l
21.474636 5.889 l
24.404335 5.889 l
24.404335 17.411999 l
24.404337 17.4121 l
h
32.880886 20 m
32.880886 5.889 l
35.810585 5.889 l
35.810585 20 l
32.880886 20 l
h
39.726559 20 m
45.22456 12.6367 l
39.882759 5.8887 l
43.447258 5.8887 l
46.962856 10.517599 l
50.478455 5.888699 l
54.042953 5.888699 l
48.701153 12.6367 l
54.199154 20 l
50.468655 20 l
46.962753 15.0098 l
43.456852 20 l
39.726353 20 l
39.726559 20 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
